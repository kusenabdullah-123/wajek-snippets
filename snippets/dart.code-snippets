{
    "Create Model": {
        "prefix": "dartmodel",
        "body": [
          "import 'package:json_annotation/json_annotation.dart';",
          "",
          "part '${2:includename}.g.dart';",
          "",
          "@JsonSerializable(includeIfNull: false)",
          "class ${1:classname} {",
          "",
          "  ${1:classname}({",
          "  });",
          "",
          "  factory ${1:classname}.fromJson(Map<String,dynamic> json) => _$${1:classname}FromJson(json);",
          "  toJson() => _$${1:classname}ToJson(this);",
          "",
          "}"
        ],
        "description": "Create Model"
    },
    "Create Service": {
      "prefix": "dartservice",
      "body": [
        "import 'package:firebase_auth/firebase_auth.dart';",
        "import '../models/${2:name}.dart';",
        "import 'package:wui/wui.dart';",
        "",
        "class ${1:classname}Result {",
        "",
        "  List<${1:classname}> data;",
        "  int count;",
        "",
        "  ${1:classname}Result({",
        "    this.data,",
        "    this.count",
        "  });",
        "",
        "}",
        "",
        "class ${1:classname}Service {",
        "",
        "  static ${1:classname}Service instance = ${1:classname}Service._internal();",
        "  ${1:classname}Service._internal();",
        "  factory ${1:classname}Service() {",
        "    return instance;",
        "  }",
        "",
        "  WuiConfig _config = WuiConfig();",
        "  WuiHttpService _httpService = WuiHttpService();",
        "  FirebaseAuth _firebaseAuth = FirebaseAuth.instance;",
        "",
        "  Future<${1:classname}Result> result(Map<String, dynamic> params) async {",
        "    String paramsStr = List<String>.from(params.entries.map(",
        "      (e) => e.key + '=' + e.value.toString()).toList()",
        "    ).join('&');",
        "    Map<String, dynamic> res = await _httpService.get(_config.getValue('apiURL') + '${2:name}' + (paramsStr.length > 0 ? '?' + paramsStr : ''), {",
        "      \"headers\" : {",
        "        \"Authorization\": await _firebaseAuth.currentUser.getIdToken()",
        "      }",
        "    });",
        "    return ${1:classname}Result(",
        "      data: List<${1:classname}>.from(res['data'].map((item) => ${1:classname}.fromJson(item))),",
        "      count: res['count'] as int",
        "    );",
        "  }",
        "",
        "  Future<${1:classname}> row(int id${1:classname}) async {",
        "    Map<String, dynamic> res = await _httpService.get(_config.getValue('apiURL') + '${2:name}/' + id${1:classname}.toString(), {",
        "      \"headers\" : {",
        "        \"Authorization\": await _firebaseAuth.currentUser.getIdToken()",
        "      }",
        "    });",
        "    return ${1:classname}.fromJson(res);",
        "  }",
        "",
        "  Future<int> insert(${1:classname} ${2:name}) async {",
        "    Map<String, dynamic> res = await _httpService.post(_config.getValue('apiURL') + '${2:name}', ${2:name}.toJson(), {",
        "      \"headers\" : {",
        "        \"Authorization\": await _firebaseAuth.currentUser.getIdToken()",
        "      }",
        "    });",
        "    return res['id${1:classname}'] as int;",
        "  }",
        "",
        "  Future<void> update(int id${1:classname}, ${1:classname} ${2:name}) async {",
        "    await _httpService.patch(_config.getValue('apiURL') + '${2:name}/' + id${1:classname}.toString(), ${2:name}.toJson(), {",
        "      \"headers\" : {",
        "        \"Authorization\": await _firebaseAuth.currentUser.getIdToken()",
        "      }",
        "    });",
        "    return;",
        "  }",
        "",
        "  Future<void> delete(int id${1:classname}) async {",
        "    await _httpService.delete(_config.getValue('apiURL') + '${2:name}/' + id${1:classname}.toString(), {",
        "      \"headers\" : {",
        "        \"Authorization\": await _firebaseAuth.currentUser.getIdToken()",
        "      }",
        "    });",
        "    return;",
        "  }",
        "",
        "}"
      ],
      "description": "Create Service"
    }
}