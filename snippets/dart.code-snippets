{
    "Create Model": {
        "prefix": "dartmodel",
        "body": [
          "import 'package:json_annotation/json_annotation.dart';",
          "",
          "part '${2:includename}.g.dart';",
          "",
          "@JsonSerializable(includeIfNull: false)",
          "class ${1:classname} {",
          "",
          "  ${1:classname}({",
          "  });",
          "",
          "  factory ${1:classname}.fromJson(Map<String,dynamic> json) => _$${1:classname}FromJson(json);",
          "  toJson() => _$${1:classname}ToJson(this);",
          "",
          "}"
        ],
        "description": "Create Model"
    },
    "Create Service": {
        "prefix": "dartservice",
        "body": [
          "import 'package:firebase_auth/firebase_auth.dart';",
          "import 'package:../models/${2:alias}.dart';",
          "import 'package:wui/wui.dart';",
          "",
          "class ${1:servicename}Result {",
          "",
          "  List<${1:servicename}> data;",
          "  int count;",
          "",
          "  ${1:servicename}Result({",
          "    this.data,",
          "    this.count",
          "  });",
          "",
          "}",
          "",
          "class ${1:servicename}Service {",
          "",
          "  static ${1:servicename}Service instance = ${1:servicename}Service._internal();",
          "  ${1:servicename}Service._internal();",
          "  factory ${1:servicename}Service() {",
          "    return instance;",
          "  }",
          "",
          "  WuiConfig _config = WuiConfig();",
          "  WuiHttpService _httpService = WuiHttpService();",
          "  FirebaseAuth _firebaseAuth = FirebaseAuth.instance;",
          "",
          "  Future<${1:servicename}Result> result({",
          "    String search = '',",
          "    String sort = '${2:alias}.id${1:servicename}:DESC',",
          "    int offset = 0,",
          "    int limit = -1",
          "  }) async {",
          "    List<String> params = [];",
          "    if(search.length > 0) { params.add('search=' + search); }",
          "    if(sort.length > 0) { params.add('sort=' + sort); }",
          "    if(limit > -1) { ",
          "      params.add('offset=' + offset.toString());",
          "      params.add('limit=' + limit.toString());",
          "    }",
          "    Map<String, dynamic> res = await _httpService.get(_config.getValue('apiURL') + '${2:alias}' + (params.length > 0 ? '?' + params.join('&') : ''), {",
          "      \"headers\" : {",
          "        \"Authorization\": await _firebaseAuth.currentUser.getIdToken()",
          "      }",
          "    });",
          "    return ${1:servicename}Result(",
          "      data: List<${1:servicename}>.from(res['data'].map((item) => ${1:servicename}.fromJson(item))),",
          "      count: res['count'] as int",
          "    );",
          "  }",
          "",
          "  Future<${1:servicename}> row(int id${1:servicename}) async {",
          "    Map<String, dynamic> res = await _httpService.get(_config.getValue('apiURL') + '${2:alias}/' + id${1:servicename}.toString(), {",
          "      \"headers\" : {",
          "        \"Authorization\": await _firebaseAuth.currentUser.getIdToken()",
          "      }",
          "    });",
          "    return ${1:servicename}.fromJson(res);",
          "  }",
          "",
          "  Future<int> insert(${1:servicename} ${2:alias}) async {",
          "    Map<String, dynamic> res = await _httpService.post(_config.getValue('apiURL') + '${2:alias}', ${2:alias}.toJson(), {",
          "      \"headers\" : {",
          "        \"Authorization\": await _firebaseAuth.currentUser.getIdToken()",
          "      }",
          "    });",
          "    return res['id${1:servicename}'] as int;",
          "  }",
          "",
          "  Future<void> update(int id${1:servicename}, ${1:servicename} ${2:alias}) async {",
          "    await _httpService.patch(_config.getValue('apiURL') + '${2:alias}/' + id${1:servicename}.toString(), ${2:alias}.toJson(), {",
          "      \"headers\" : {",
          "        \"Authorization\": await _firebaseAuth.currentUser.getIdToken()",
          "      }",
          "    });",
          "    return;",
          "  }",
          "",
          "  Future<void> delete(int id${1:servicename}) async {",
          "    await _httpService.delete(_config.getValue('apiURL') + '${2:alias}/' + id${1:servicename}.toString(), {",
          "      \"headers\" : {",
          "        \"Authorization\": await _firebaseAuth.currentUser.getIdToken()",
          "      }",
          "    });",
          "    return;",
          "  }",
          "",
          "}"
        ],
        "description": "Create Service"
    }
}