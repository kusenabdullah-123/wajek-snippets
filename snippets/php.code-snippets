{
    "Selvi CORS": {
      "prefix": "sfcors",
      "body": [
        "header(\"Access-Control-Allow-Origin: *\");",
        "header(\"Access-Control-Allow-Headers: Content-Type, Authorization, authorization\");",
        "header(\"Access-Control-Allow-Methods: OPTIONS, GET, POST, PATCH, DELETE\");"
      ],
      "description": "Selvi CORS"
    },
    "Selvi Controller": {
        "prefix": "sfcontroller",
        "body": [
          "namespace App\\Controllers;",
          "",
          "use Selvi\\Controller;",
          "use Selvi\\Exception;",
          "use App\\Models\\\\${2:modelclass};",
          "",
          "class ${1:controllername} extends Controller { ",
          "    ",
          "    function __construct() {",
          "        \\$this->load(${2:modelclass}::class, '${2:modelclass}');",
          "    }",
          "",
          "    function rowException(\\$id${2:modelclass}) {",
          "        \\$data = \\$this->${2:modelclass}->row([['id${2:modelclass}', \\$id${2:modelclass}]]);",
          "        if(!\\$data) {",
          "            Throw new Exception('${2:modelclass} not found', '${3:name}/not-found', 404);",
          "        }",
          "        return \\$data;",
          "    }",
          "",
          "    function result() {",
          "        \\$order = [];",
          "        \\$sort = \\$this->input->get('sort');",
          "        if(\\$sort !== null) {",
          "            \\$order = \\buildOrder(\\$sort);",
          "        }",
          "",
          "        \\$orWhere = [];",
          "        \\$search = \\$this->input->get('search');",
          "        if(\\$search !== null) {",
          "            \\$orWhere = \\buildSearch(['nm${2:modelclass}'], \\$search);",
          "        }",
          "",
          "        \\$limit = \\$this->input->get('limit') ?? -1;",
          "        \\$offset = \\$this->input->get('offset') ?? 0;",
          "        \\$where = [];",
          "",
          "        return jsonResponse([",
          "            'data' => \\$this->${2:modelclass}->result(\\$where, \\$orWhere, \\$order, \\$limit, \\$offset),",
          "            'count' => \\$this->${2:modelclass}->count(\\$where, \\$orWhere)",
          "        ]);",
          "    }",
          "",
          "    function row() {",
          "        \\$id${2:modelclass} = \\$this->uri->segment(2);",
          "        \\$data = \\$this->rowException(\\$id${2:modelclass});",
          "        return jsonResponse(\\$data);",
          "    }",
          "",
          "    function insert() {",
          "        \\$data = json_decode(\\$this->input->raw(), true);",
          "        \\$id${2:modelclass} = \\$this->${2:modelclass}->insert(\\$data);",
          "        if(\\$id${2:modelclass} === false) {",
          "            Throw new Exception('Failed to insert', '${3:name}/insert-failed');",
          "        }",
          "        return jsonResponse(['id${2:modelclass}' => \\$id${2:modelclass}], 201);",
          "    }",
          "",
          "    function update() {",
          "        \\$id${2:modelclass} = \\$this->uri->segment(2);",
          "        \\$this->rowException(\\$id${2:modelclass});",
          "        \\$data = json_decode(\\$this->input->raw(), true);",
          "        if(!\\$this->${2:modelclass}->update([['id${2:modelclass}', \\$id${2:modelclass}]], \\$data)) {",
          "            Throw new Exception('Failed to update', '${3:name}/update-failed');",
          "        }",
          "        return response('', 204);",
          "    }",
          "",
          "    function delete() {",
          "        \\$id${2:modelclass} = \\$this->uri->segment(2);",
          "        \\$this->rowException(\\$id${2:modelclass});",
          "        if(!\\$this->${2:modelclass}->delete([['id${2:modelclass}', \\$id${2:modelclass}]])) {",
          "            Throw new Exception('Failed to delete', '${3:name}/delete-failed');",
          "        }",
          "        return response('', 204);",
          "    }",
          "",
          "}"
        ],
        "description": "Selvi Framework CRUD Controller"
    },
    "Selvi Model": {
        "prefix": "sfmodel",
        "body": [
          "",
          "namespace App\\Models;",
          "use Selvi\\Database\\Manager;",
          "",
          "class ${1:modelname} {",
          "",
          "    private \\$db;",
          "",
          "    function __construct() {",
          "        \\$this->db = Manager::get('${3:schema}');",
          "    }",
          "",
          "    function count(\\$where = [], \\$orWhere = []) {",
          "        return \\$this->db->select('COUNT(${2:tablename}.id${1:modelname}) as jml${1:modelname}')",
          "            ->where(\\$where)->orWhere(\\$orWhere)",
          "            ->get('${2:tablename}')->row()->jml${1:modelname};",
          "    }",
          "",
          "    function result(\\$where = [], \\$orWhere = [], \\$order = [], \\$limit = -1, \\$offset = 0) {",
          "        if(\\$limit > -1) {",
          "            \\$this->db->limit(\\$limit)->offset(\\$offset);",
          "        }",
          "        return \\$this->db->where(\\$where)->orWhere(\\$orWhere)",
          "            ->order(\\$order)->get('${2:tablename}')->result();",
          "    }",
          "",
          "    function row(\\$where) {",
          "        return \\$this->db->where(\\$where)->get('${2:tablename}')->row();",
          "    }",
          "",
          "    function insert(\\$data) {",
          "        \\$insert = \\$this->db->insert('${2:tablename}', \\$data);",
          "        if(\\$insert === true) {",
          "            return \\$this->db->getlastid();",
          "        }",
          "        return false;",
          "    }",
          "",
          "    function update(\\$where, \\$data) {",
          "        return \\$this->db->where(\\$where)->update('${2:tablename}', \\$data);",
          "    }",
          "",
          "    function delete(\\$where) {",
          "        return \\$this->db->where(\\$where)->delete('${2:tablename}');",
          "    }",
          "",
          "}"
        ],
        "description": "Selvi Model"
    },
    "Selvi Routes": {
        "prefix": "sfroutes",
        "body": [
          "use Selvi\\Route;",
          "",
          "Route::get('/${1:uri}', '${2:controller}@result');",
          "Route::get('/${1:uri}/(:any)', '${2:controller}@row');",
          "Route::post('/${1:uri}', '${2:controller}@insert');",
          "Route::patch('/${1:uri}/(:any)', '${2:controller}@update');",
          "Route::delete('/${1:uri}/(:any)', '${2:controller}@delete');"
        ],
        "description": "Selvi Routes"
    },
    "Selvi Database": {
        "prefix": "sfdatabase",
        "body": [
          "use Selvi\\Database\\Manager;",
          "",
          "Manager::add([",
          "    'host' => '${1:host}',",
          "    'username' => '${2:username}',",
          "    'password' => '${3:password}',",
          "    'database' => '${4:database}',",
          "    'debug' => true",
          "], '${5:schema}');",
          "",
          "Manager::get('${5:schema}')->addMigration(${6:migrationpath});"
        ],
        "description": "Selvi Database"
    },
    "Selvi Migration": {
        "prefix": "sfmigration",
        "body": [
          "",
          "return function (\\$schema, \\$direction) {",
          "",
          "  if(\\$direction == 'up') :",
          "    ",
          "  endif;",
          "",
          "  if(\\$direction == 'down') :",
          "    ",
          "  endif;",
          "",
          "};"
        ],
        "description": "Selvi Migration"
    },
    "Selvi Index": {
      "prefix": "sfindex",
      "body": [
        "require \"vendor/autoload.php\";",
        "Selvi\\Framework::run();"
      ],
      "description": "Selvi Index File"
    }
}