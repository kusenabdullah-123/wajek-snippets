{
    "Wui Service Firebase": {
        "prefix": "wuiservicefirebase",
        "body": [
          "import { HttpHeaders } from '@angular/common/http';",
          "import { Inject, Injectable } from '@angular/core';",
          "import { WuiHttpService } from '@wajek/wui';",
          "import firebase from 'firebase/app';",
          "import 'firebase/auth';",
          "",
          "@Injectable({",
          "  providedIn: 'root'",
          "})",
          "export class ${1:class}Service {",
          "",
          "  constructor(",
          "    @Inject('apiURL') private apiURL: string,",
          "    private httpService: WuiHttpService",
          "  ) { }",
          "",
          "  async result(params = {}) {",
          "    return await this.httpService.get(this.apiURL + '${2:uri}', {",
          "      headers: new HttpHeaders({",
          "        \"Authorization\": await firebase.auth().currentUser.getIdToken()",
          "      }),",
          "      params: params",
          "    });",
          "  }",
          "",
          "  async row(id${1:class}) {",
          "    return await this.httpService.get(this.apiURL + '${2:uri}/' + id${1:class}, {",
          "      headers: new HttpHeaders({",
          "        \"Authorization\": await firebase.auth().currentUser.getIdToken()",
          "      })",
          "    });",
          "  }",
          "",
          "  async insert(data = {}) {",
          "    return await this.httpService.post(this.apiURL + '${2:uri}', data, {",
          "      headers: new HttpHeaders({",
          "        \"Authorization\": await firebase.auth().currentUser.getIdToken()",
          "      })",
          "    });",
          "  }",
          "",
          "  async update(id${1:class}, data = {}) {",
          "    return await this.httpService.patch(this.apiURL + '${2:uri}/' + id${1:class}, data, {",
          "      headers: new HttpHeaders({",
          "        \"Authorization\": await firebase.auth().currentUser.getIdToken()",
          "      })",
          "    });",
          "  }",
          "",
          "  async delete(id${1:class}) {",
          "    return await this.httpService.delete(this.apiURL + '${2:uri}/' + id${1:class}, {",
          "      headers: new HttpHeaders({",
          "        \"Authorization\": await firebase.auth().currentUser.getIdToken()",
          "      })",
          "    });",
          "  }",
          "",
          "}",
          ""
        ],
        "description": "Wui Service Firebase"
      }
}